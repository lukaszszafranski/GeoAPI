// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StockAPI.Models;

namespace StockAPI.Migrations
{
    [DbContext(typeof(StockAPIContext))]
    [Migration("20200104215818_CreateDB")]
    partial class CreateDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StockAPI.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StockAPI.Models.Chart", b =>
                {
                    b.Property<DateTimeOffset?>("Date");

                    b.Property<double?>("Change");

                    b.Property<double?>("ChangeOverTime");

                    b.Property<double?>("ChangePercent");

                    b.Property<double?>("Close");

                    b.Property<double?>("High");

                    b.Property<string>("Label");

                    b.Property<double?>("Low");

                    b.Property<double?>("Open");

                    b.Property<int?>("StockDataID");

                    b.Property<double?>("UClose");

                    b.Property<double?>("UHigh");

                    b.Property<double?>("ULow");

                    b.Property<double?>("UOpen");

                    b.Property<long?>("UVolume");

                    b.Property<long?>("Volume");

                    b.HasKey("Date");

                    b.HasIndex("StockDataID");

                    b.ToTable("Chart");
                });

            modelBuilder.Entity("StockAPI.Models.Quote", b =>
                {
                    b.Property<string>("Symbol")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AvgTotalVolume");

                    b.Property<string>("CalculationPrice");

                    b.Property<double?>("Change");

                    b.Property<double?>("ChangePercent");

                    b.Property<double?>("Close");

                    b.Property<long?>("CloseTime");

                    b.Property<string>("CompanyName");

                    b.Property<double?>("DelayedPrice");

                    b.Property<long?>("DelayedPriceTime");

                    b.Property<double?>("ExtendedChange");

                    b.Property<double?>("ExtendedChangePercent");

                    b.Property<double?>("ExtendedPrice");

                    b.Property<long?>("ExtendedPriceTime");

                    b.Property<double?>("High");

                    b.Property<bool?>("IsUsMarketOpen");

                    b.Property<long?>("LastTradeTime");

                    b.Property<double?>("LatestPrice");

                    b.Property<string>("LatestSource");

                    b.Property<string>("LatestTime");

                    b.Property<long?>("LatestUpdate");

                    b.Property<long?>("LatestVolume");

                    b.Property<long?>("Low");

                    b.Property<long?>("MarketCap");

                    b.Property<double?>("Open");

                    b.Property<long?>("OpenTime");

                    b.Property<double?>("PeRatio");

                    b.Property<double?>("PreviousClose");

                    b.Property<long?>("PreviousVolume");

                    b.Property<string>("PrimaryExchange");

                    b.Property<long?>("Volume");

                    b.Property<double?>("Week52High");

                    b.Property<double?>("Week52Low");

                    b.Property<double?>("YtdChange");

                    b.HasKey("Symbol");

                    b.ToTable("Quote");
                });

            modelBuilder.Entity("StockAPI.Models.StockData", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("QuoteSymbol");

                    b.HasKey("ID");

                    b.HasIndex("QuoteSymbol");

                    b.ToTable("StockData");
                });

            modelBuilder.Entity("StockAPI.Models.Chart", b =>
                {
                    b.HasOne("StockAPI.Models.StockData")
                        .WithMany("Chart")
                        .HasForeignKey("StockDataID");
                });

            modelBuilder.Entity("StockAPI.Models.StockData", b =>
                {
                    b.HasOne("StockAPI.Models.Quote", "Quote")
                        .WithMany()
                        .HasForeignKey("QuoteSymbol");
                });
#pragma warning restore 612, 618
        }
    }
}
